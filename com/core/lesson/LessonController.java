package com.core.lesson;

import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;

/**
 * This class is responsible for reacting to events generated by pushing any of the
 * three buttons, 'Next', 'Previous'.Based on what button is pressed,
 * the controller will update the model to show a new page and reset the state of
 * the buttons as necessary.
 */
public class LessonController implements ActionListener {

    private Lesson lesson;

    /**
     * This constructor accepts a reference to the Lesson component that created it,
     * which it uses to update the button components and access the LessonModel.
     * @param l A callback to the Lesson component that created this controller.
     */
    public LessonController(Lesson l) {
        lesson = l;
    }

    /**
     * Calling method for the action listener interface. This class listens for actions
     * performed by the buttons in the Lesson class, and calls methods below to determine
     * the correct course of action.
     * @param evt The ActionEvent that occurred.
     */
    public void actionPerformed(java.awt.event.ActionEvent evt) {

        if (evt.getActionCommand().equals(Lesson.BACK_BUTTON_ACTION_COMMAND))
            backButtonPressed();
        else if (evt.getActionCommand().equals(Lesson.NEXT_BUTTON_ACTION_COMMAND))
            nextButtonPressed();

    }

    private void nextButtonPressed() {

        LessonModel model = lesson.getModel();
        LessonPageDescriptor descriptor = model.getCurrentPageDescriptor();

        //  If it is a finishable page, close down the dialog. Otherwise,
        //  get the ID that the current page identifies as the next page,
        //  and display it.

        Object nextpageDescriptor = descriptor.getNextPageDescriptor();

        if (nextpageDescriptor instanceof LessonPageDescriptor.FinishIdentifier) {
            lesson.close(Lesson.FINISH_RETURN_CODE);
        } else {
            if (nextpageDescriptor != null)
                lesson.setCurrentPage(nextpageDescriptor);
        }

    }

    private void backButtonPressed() {

        LessonModel model = lesson.getModel();
        LessonPageDescriptor descriptor = model.getCurrentPageDescriptor();

        //  Get the descriptor that the current page identifies as the previous
        //  page, and display it.

        Object backpageDescriptor = descriptor.getBackPageDescriptor();
        lesson.setCurrentPage(backpageDescriptor);

    }


    void resetButtonsToPageRules() {

        //  Reset the buttons to support the original page rules,
        //  including whether the next or back buttons are enabled or
        //  disabled, or if the page is finishable.

        LessonModel model = lesson.getModel();
        LessonPageDescriptor descriptor = model.getCurrentPageDescriptor();

        //  If the page in question has another page behind it, enable
        //  the back button. Otherwise, disable it.

        model.setBackButtonText(Lesson.BACK_TEXT);
        model.setBackButtonIcon(Lesson.BACK_ICON);

        if (descriptor.getBackPageDescriptor() != null)
            model.setBackButtonEnabled(Boolean.TRUE);
        else
            model.setBackButtonEnabled(Boolean.FALSE);

        //  If the page in question has one or more pages in front of it,
        //  enable the next button. Otherwise, disable it.

        if (descriptor.getNextPageDescriptor() != null)
            model.setNextFinishButtonEnabled(Boolean.TRUE);
        else
            model.setNextFinishButtonEnabled(Boolean.FALSE);

        //  If the page in question is the last page in the series, change
        //  the Next button to Finish. Otherwise, set the text back to Next.

        if (descriptor.getNextPageDescriptor() == null) {
            model.setNextFinishButtonText(Lesson.FINISH_TEXT);
            //model.setNextFinishButtonIcon(Lesson.FINISH_ICON);
        } else {
            model.setNextFinishButtonText(Lesson.NEXT_TEXT);
            //model.setNextFinishButtonIcon(Lesson.NEXT_ICON);
        }

    }


}
